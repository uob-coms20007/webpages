- num: 1
  lecturer: SR
  theme: Transition systems
  description: Introduction to transition systems as a simple model of computation and consider some of their principal features.  We introduce the idea of an *invariant* as a means of reasoning about the possible computations described by a transition system.
  videos: 
    - num: 1
      dsc: Introduction to the definition of transition systems and the traffic light example.
      dur: 21
      url: https://web.microsoftstream.com/video/f2350538-7875-4dcc-9a79-ba3198877433
      ref: 
        - https://uob-coms20007.github.io/reference/trsys/trsys.html#transition-system
        - https://uob-coms20007.github.io/reference/trsys/trsys.html#successor
        - https://uob-coms20007.github.io/reference/trsys/trsys.html#trace
        - https://uob-coms20007.github.io/reference/trsys/trsys.html#reachable
        - https://uob-coms20007.github.io/reference/trsys/trsys.html#transitions-to
    - num: 2
      dsc: The While program transition system example.
      dur: 21
      url: https://web.microsoftstream.com/video/13d3c588-aa76-4ea4-a542-eb928c653148
      ref: 
        - https://uob-coms20007.github.io/reference/trsys/trsys.html#terminal
        - https://uob-coms20007.github.io/reference/trsys/trsys.html#complete-trace
    - num: 3
      dsc: The chameleons transition system example, nondeterminism.
      dur: 17
      url: https://web.microsoftstream.com/video/ca2806d0-92f4-4ff4-8df5-46505782a4d7?list=studio
      ref:
        - https://uob-coms20007.github.io/reference/trsys/trsys.html#deterministic-transition-system
    - num: 4
      dsc: A safety property of the chameleons example, and how to argue it informally.
      dur: 20
      url: https://web.microsoftstream.com/video/cef410e5-7c36-4ea8-9e17-4494642548ad
      ref:
    - num: 5
      dsc: Introducing the notion of transition system invariant.
      dur: 24
      url: https://web.microsoftstream.com/video/f0d9ef31-0290-4702-8126-2769563f3650
      ref:
        - https://uob-coms20007.github.io/reference/trsys/invariance.html#invariant
    - num: 6
      dsc: Inductive invariants and how to prove that a candidate invariant is one.
      dur: 21
      url: https://web.microsoftstream.com/video/e66c62f0-e6d7-4307-aac6-18c0db920bcf
      ref:
        - https://uob-coms20007.github.io/reference/trsys/invariance.html#inductive-invariant

- num: 2
  lecturer: SR
  theme: Deterministic automata
  description: We introduce *deterministic automata* as a means to describe a certain class of string classifying computations.  
  videos: 
    - num: 1
      dsc: Informal introduction to deterministic finite state automata via examples.
      url: https://web.microsoftstream.com/video/a986f0dc-843b-4a79-afe4-e8fdea76a62d
      dur: 33
      ref: 
    - num: 2
      dsc: The Haskell module identifiers example automaton.
      url: https://web.microsoftstream.com/video/88fcc87c-bccd-4986-bc75-8b5ab8656ec4
      dur: 17
      ref:
    - num: 3
      dsc: Some basic notation and terminology to do with strings.
      url: https://web.microsoftstream.com/video/c4d48c61-9f62-4463-9abc-79a0a9f20ac0
      dur: 11
      ref:
        - https://uob-coms20007.github.io/reference/prereqs/strings.html#alphabet
        - https://uob-coms20007.github.io/reference/prereqs/strings.html#letters
        - https://uob-coms20007.github.io/reference/prereqs/strings.html#string
        - https://uob-coms20007.github.io/reference/prereqs/strings.html#language
        - https://uob-coms20007.github.io/reference/prereqs/strings.html#concatenating
        - https://uob-coms20007.github.io/reference/prereqs/strings.html#$k$-fold-concatenation
    - num: 4
      dsc: The formal definition of deterministic finite state automata (DFA).
      url: https://web.microsoftstream.com/video/1159b6e6-1387-4159-8390-b636349560cf
      dur: 27
      ref:
        - https://uob-coms20007.github.io/reference/regular/dfa.html#Deterministic-Finite-State-Automaton-(DFA)
        - https://uob-coms20007.github.io/reference/regular/dfa.html#transition-system-generated-by-an-DFA
        - https://uob-coms20007.github.io/reference/regular/dfa.html#accepted
        - https://uob-coms20007.github.io/reference/regular/dfa.html#recognised
    - num: 5
      dsc: Examples of the formal definition in use for describing particular automata.
      url: https://web.microsoftstream.com/video/143dcf2b-dab2-49b7-b7de-ec1a179eb9ff
      dur: 12
      ref:
    - num: 6
      dsc: Using the formal definition in general statements and the product construction.
      url: https://web.microsoftstream.com/video/f3138085-7d05-49f3-abec-d42031944bed
      dur: 28
      ref:
        - https://uob-coms20007.github.io/reference/regular/product.html#product-automaton

- num: 3
  lecturer: SR
  theme: Nondeterminism
  description: We introduce non-determinism and internal actions to our automata.  We show that, from every non-deterministic automaton we can obtain an equivalent deterministic automaton and thus deduce that there is no increase in expressive power.
  videos: 
    - num: 1
      dsc: How to design finite state automata.
      url: https://web.microsoftstream.com/video/01b4d9ae-cff6-4440-b91a-cde1ea8ce1d1
      dur: 31
      ref:
    - num: 2
      dsc: Introducing nondeterministic finite state automata (NFA).
      url: https://web.microsoftstream.com/video/ed647767-4cfc-4809-a603-07a554055d92
      dur: 25
      ref:
        - https://uob-coms20007.github.io/reference/regular/nfa.html#Nondeterministic-Finite-State-Automaton-(NFA)
        - https://uob-coms20007.github.io/reference/regular/nfa.html#transition-system-generated-by-an-NFA
        - https://uob-coms20007.github.io/reference/regular/nfa.html#accepted
        - https://uob-coms20007.github.io/reference/regular/nfa.html#recognised
    - num: 3
      dsc: Nondeterminism as the ability to guess and verify.
      url: https://web.microsoftstream.com/video/716e72de-a126-4861-9730-291d458b2b41
      dur: 17
      ref: 
    - num: 4
      dsc: Nondeterminism does not increase expressive power.
      url: https://web.microsoftstream.com/video/967de0de-9c69-4ad6-8276-079abcd2092c
      dur: 3
      ref: 
    - num: 5
      dsc: Eliminating nondeterministic choice.
      url: https://web.microsoftstream.com/video/ed3c17a6-d483-4140-835f-b45e4fce6fa0
      dur: 21
      ref:
    - num: 6
      dsc: Eliminating epsilon transitions.
      url: https://web.microsoftstream.com/video/98969fc9-c001-40a0-b35d-2152b93e5b0b
      dur: 14
      ref: 
        - https://uob-coms20007.github.io/reference/regular/powerset.html#epsilon-closure
        - https://uob-coms20007.github.io/reference/regular/powerset.html#powerset-automaton

- num: 4
  lecturer: SR
  theme: Regular languages
  description: We introduce the class of regular languages as those that are recognisable by finite automata.  We show that this class is closed under various operations on languages but that it is ultimately limited - there are languages that are not regular.
  videos:  
    - num: 1
      dsc: I describe how to construct a regular expression from an NFA. This content is not assessed in the final exam.
      url: https://web.microsoftstream.com/video/657d40d2-9057-497f-850f-ded7cfddc27a
      dur: 27
      ref:
    - num: 2
      dsc: We introduce the regular languages and consider their closure under certain operations on sets of words.
      url: https://web.microsoftstream.com/video/7d80c080-a65c-4b71-8354-f51b921b536b
      dur: 15
      ref:
        - https://uob-coms20007.github.io/reference/regular/reg.html#regular-language
        - https://uob-coms20007.github.io/reference/regular/reg.html#Regular-Closure
    - num: 3
      dsc: We prove that the language b^nc^n is not regular.
      url: https://web.microsoftstream.com/video/af2cc36c-2a34-4952-9f6f-214cd9ea5fbe
      dur: 25
      ref:
        - https://uob-coms20007.github.io/reference/regular/reg.html#Irregularity-of-$b^nc^n$
    - num: 4
      dsc: We distil the previous argument into the pumping lemma and apply it to an example.
      url: https://web.microsoftstream.com/video/6ccdeeac-f95a-4a39-8bbe-4258440d702e
      dur: 22
      ref:
        - https://uob-coms20007.github.io/reference/regular/reg.html#Pumping-Lemma

- num: 5
  lecturer: FD
  theme: The While language
  description: We introduce the idea of programming language *syntax* and show how it can be described by a device called a grammar.  We consider some of the principal features of grammars and the trees they generate.
  videos:
    - num: 1
      dsc: We (re)introduce a familiar way of describing computationsâ€”programming languages, and place it in the context of finite automata and transition systems. We discuss the *concrete syntax* of the While language with an example, and outline our roadmap towards turning programs into effective computations.
      dur: 20
      url: https://web.microsoftstream.com/video/2fb6b4e4-7db3-4b92-960b-33d493f3f86d
      ref:
        - while-factorial
    - num: 2
      dsc: We discuss *lexical analysis* (or scanning), which turns a stream of characters (the concrete syntax) into a stream of *tokens*.
      dur: 26
      url: https://web.microsoftstream.com/video/d3aadeaf-4cf2-49d1-ad84-55080f32b19e
      ref:
        - https://uob-coms20007.github.io/reference/while/concrete-syntax.html#lexical-categories
        - https://uob-coms20007.github.io/reference/while/abstract-syntax.html
    - num: 3
      dsc: We discuss *context-free grammars* and some of their properties, focusing on how to avoid *ambiguity*.
      dur: 47
      url: https://web.microsoftstream.com/video/e08caa57-d146-4c62-9eb7-25e1b4abce95
      ref:
        - https://uob-coms20007.github.io/reference/while/abstract-syntax.html
        - https://uob-coms20007.github.io/reference/grammars/cfg.html#context-free-grammars
        - https://uob-coms20007.github.io/reference/grammars/cfg.html#parse-trees
        - https://uob-coms20007.github.io/reference/grammars/cfg.html#ambiguous-grammars
    - num: 4
      dsc: We discuss *predictive parsing*, which is a straightforward way of writing recognizers and parsers for some context-free languages. This requires us to further fiddle with our grammar so its rules do not exhibit *left-recursion*.
      dur: 20
      url: https://web.microsoftstream.com/video/e38cdff4-1dfd-49fd-8a8a-b5a0b7fcfa60
      ref:

- num: 6

- num: 7
  lecturer: FD
  theme: Operational semantics
  description: We introduce the idea of the *semantics* of a programming language and how the operational semantics of the While language can be described by a transition system.  We show how such a transition system can be specified by a system of rules associated with the syntax.
  videos:
  - num: 1
    dsc: We give meaning to arithmetic expressions, using this opportunity to define the states of While programs, and to highlight the often heavy overloading of mathematical symbols.
    dur: 27
    url: https://web.microsoftstream.com/video/628f4ba3-7950-4703-8b4f-46d4aab8728e
    ref:
      - https://uob-coms20007.github.io/reference/while/semantics.html#state
      - https://uob-coms20007.github.io/reference/while/semantics.html#semantics-of-arithmetic-expressions
  - num: 2
    dsc: We give meaning to boolean expressions.
    dur: 14
    url: https://web.microsoftstream.com/video/d8481009-a09f-46aa-b74e-06d01a58b57b
    ref: 
      - https://uob-coms20007.github.io/reference/while/semantics.html#semantics-of-boolean-expressions
  - num: 3
    dsc: We give meaning to statements by definingâ€”for all statements and statesâ€”a transition system that describes the computational trace of the program.
    dur: 47
    url: https://web.microsoftstream.com/video/0c50209e-f717-44b9-aba4-eff9ec9b545c
    ref:
      - https://uob-coms20007.github.io/reference/while/semantics.html#semantics-of-statements
      - https://uob-coms20007.github.io/reference/trsys/trsys.html#transition-system
      - https://uob-coms20007.github.io/reference/trsys/trsys.html#successor
      - https://uob-coms20007.github.io/reference/trsys/trsys.html#trace
      - https://uob-coms20007.github.io/reference/trsys/trsys.html#reachable
      - https://uob-coms20007.github.io/reference/trsys/trsys.html#transitions-to
      - https://uob-coms20007.github.io/reference/trsys/trsys.html#terminal
      - https://uob-coms20007.github.io/reference/trsys/trsys.html#complete-trace
  - num: 4
    dsc: We discuss structural induction as a proof technique wfich allows us to reason about properties of the semantics (of all programs at once). [This video's sound was not recorded properly. I will replace it with slides only.]
    dur: 35
    url: https://web.microsoftstream.com/video/745c8a50-4f7e-4a43-b20a-2bd08ed8922bs
  - num: 5
    dsc: We informally describe how the semantics will allow us to reason about properties of specific programs. [This video's sound was not recorded properly. I will cover its contents in Week 8.]
    dur: 14
    url: https://web.microsoftstream.com/video/c484c655-5a40-4347-9296-5a7ad9c8c7d6

- num: 8
  lecturer: FD
  theme: Verification and Compilation
  description: We use the semantics of programs to prove properties about them, and to refine them down to lower levels of abstraction through compilation.
  videos:
  - nume: 1
    dsc: (Optional) We present the concepts of weakest precondition and loop invariants on some simple examples.
    dur: 47
    url: https://web.microsoftstream.com/video/9e75d06e-e5bc-4bd0-99e3-a121a9eb5678
  - num: 2
    dsc: We introduce the Abstract Machine and its semantics.
    dur: 35
    url: https://web.microsoftstream.com/video/91bf53a2-b2d2-4cbc-b77f-f99295318e6f
  - num: 3
    dsc: We discuss compilation, and the compilation of arithmetic expressions from the While language to the Abstract Machine.
    dur: 37
    url: https://web.microsoftstream.com/video/2c849e3d-1037-472a-ac62-a17235779d4f
  - num: 4
    dsc: We discuss the compilation of boolean expressions from the While language to the Abstract Machine.
    dur: 10
    url: https://web.microsoftstream.com/video/57d88754-cda2-4f30-9af1-317a1d1d68e1
  - num: 5
    dsc: We discuss the full compilation of While programs into the Abstract Machine.
    dur: 13
    url: https://web.microsoftstream.com/video/e0401c42-86c8-4fea-8783-d2d56d227690
  - num: 6
    dsc: (Optional) We discuss compilation beyond the Abstract Machine and towards more realistic processing models.
    dur: 34
    url: https://web.microsoftstream.com/video/18b43ddb-1406-409f-9118-30116dc772c5
  references:

- num: 9
  lecturer: AK
  theme: Computability
  description: In order to understand the limits of computation, we define the notions of computable functions and (semi-)decidable predicate over the natural numbers. We begin showing that all sorts of interesting data types can be encoded into the natural numbers.
  videos: 
  - num: 1
    dsc: Introduction to computability theory; the limits of computation.
    dur: 9
    url: https://web.microsoftstream.com/video/87ec8b2d-71f8-4026-a4f2-f6e370d817ac
  - num: 2
    dsc: We discuss functions, partial functions, and Kleene equality.
    dur: 10
    url: https://web.microsoftstream.com/video/e3143019-62ad-4e3f-8cb1-67f535cc149c
  - num: 3
    dsc: We introduce the idea of a computable function, and discuss various subtle details of the definition.
    dur: 17
    url: https://web.microsoftstream.com/video/856e5393-fdab-4c45-8953-aa1885d7fd11
  - num: 4
    dsc: After introducing computable functions, we turn to the notion of predicates. These are seen as computational YES/NO problems, which are decidable whenever their characteristic function is computable.
    dur: 20
    url: https://web.microsoftstream.com/video/72dc7e28-ae7e-4429-a40d-66c37e9a79bc
  - num: 5
    dur: 17
    dsc: The idea of bijections is introduced as a device for representing infinite data as natural numbers.
    url: https://web.microsoftstream.com/video/a5a8f115-ec3b-4fb1-8d79-b9e5ef18a83c
  - num: 6
    dur: 5
    dsc: We briefly cover what it means to compute 'under' a representation.
    url: https://web.microsoftstream.com/video/74f96159-28e3-46bb-907f-80922074a493
  - num: 7
    dsc: The device of a section-retraction pair is introduced as a device for representing finite data as natural numbers.
    url: about:blank
  references:
    - decision-problems
    - decidable-(recursive)
    - semidecidable-(recursively-enumerable)
    - decidability-of-automaton-emptiness
    - decidability-of-while-program-membership
    - decidability-of-existence-of-god
    - coding-strings
    - semidecidability-of-while-program-termination

- num: 10
  lecturer: AK
  theme: Universality of While
  description: We argue that the While language is capable of describing any algorithm by illustrating, informally, that (a) language extensions do not add expressive power and (b) While already subsumes other models of computation.
  videos: 
  references:
    - church-turing-thesis

- num: 11
  lecturer: AK
  theme: Undecidability
  description: We prove that the problem *While Program Termination* is undecidable.  We introduce the technique of *reduction* and deduce that a number of other problems are therefore also undecidable.
  videos: 
  references:
    - undecidability-of-while-program-termination
    - undecidability-of-while-program-membership
    - undecidability-of-equality-of-haskell-functions

- num: 12
