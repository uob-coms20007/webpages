- num: 1
  lecturer: SR
  theme: Transition systems
  description: Introduction to transition systems as a simple model of computation and consider some of their principal features.  We introduce the idea of an *invariant* as a means of reasoning about the possible computations described by a transition system.
  videos: 
    - num: 1
      dsc: Introduction to the definition of transition systems and the traffic light example.
      dur: 21
      url: https://web.microsoftstream.com/video/f2350538-7875-4dcc-9a79-ba3198877433
      ref: 
        - https://uob-coms20007.github.io/reference/trsys.html#transition-system
        - https://uob-coms20007.github.io/reference/trsys.html#successor
        - https://uob-coms20007.github.io/reference/trsys.html#trace
        - https://uob-coms20007.github.io/reference/trsys.html#reachable
        - https://uob-coms20007.github.io/reference/trsys.html#transitions-to
    - num: 2
      dsc: The While program transition system example.
      dur: 21
      url: https://web.microsoftstream.com/video/13d3c588-aa76-4ea4-a542-eb928c653148
      ref: 
        - https://uob-coms20007.github.io/reference/trsys.html#terminal
        - https://uob-coms20007.github.io/reference/trsys.html#complete-trace
    - num: 3
      dsc: The chameleons transition system example, nondeterminism.
      dur: 17
      url: https://web.microsoftstream.com/video/ca2806d0-92f4-4ff4-8df5-46505782a4d7?list=studio
      ref:
        - https://uob-coms20007.github.io/reference/trsys.html#deterministic-transition-system
    - num: 4
      dsc: A safety property of the chameleons example, and how to argue it informally.
      dur: 20
      url: https://web.microsoftstream.com/video/cef410e5-7c36-4ea8-9e17-4494642548ad
      ref:
    - num: 5
      dsc: Introducing the notion of transition system invariant.
      dur: 24
      url: https://web.microsoftstream.com/video/f0d9ef31-0290-4702-8126-2769563f3650
      ref:
        - https://uob-coms20007.github.io/reference/invariance.html#invariant
    - num: 6
      dsc: Inductive invariants and how to prove that a candidate invariant is one.
      dur: 21
      url: https://web.microsoftstream.com/video/e66c62f0-e6d7-4307-aac6-18c0db920bcf
      ref:
        - https://uob-coms20007.github.io/reference/invariance.html#inductive-invariant

- num: 2
  lecturer: SR
  theme: Deterministic automata
  description: We introduce *deterministic automata* as a means to describe a certain class of string classifying computations.  
  videos: 
  references:
    - strings-and-languages
    - deterministic-finite-state-automata
    - induced-transition-system
    - language-recognised

- num: 3
  lecturer: SR
  theme: Nondeterminism
  description: We introduce non-determinism and internal actions to our automata.  We show that, from every non-deterministic automaton we can obtain an equivalent deterministic automaton and thus deduce that there is no increase in expressive power.
  videos: 
  references:
    - nondeterministic-finite-state-automata
    - induced-transition-system
    - language-recognised
    - powerset-construction

- num: 4
  lecturer: SR
  theme: Regular languages
  description: We introduce the class of regular languages as those that are recognisable by finite automata.  We show that this class is closed under various operations on languages but that it is ultimately limited - there are languages that are not regular.
  videos:  
  references:
    - closure-under-regular-ops
    - inexpressibility

- num: 5
  lecturer: FD
  theme: The While language
  description: We introduce the idea of programming language *syntax* and show how it can be described by a device called a grammar.  We consider some of the principal features of grammars and the trees they generate.
  videos: 
  references:
    - concrete-vs-abstract-syntax
    - parse-trees-and-ambiguity
    - while-program-syntax
    - free variables
    - substitution

- num: 6

- num: 7
  lecturer: FD
  theme: Operational semantics
  description: We introduce the idea of the *semantics* of a programming language and how the operational semantics of the While language can be described by a transition system.  We show how such a transition system can be specified by a system of rules associated with the syntax.
  videos: 
  references:
    - while-program-state
    - semantics-of-expressions
    - operational-semantics-of-while

- num: 8
  lecturer: FD
  theme: Compilation (or other topics)
  description:
  videos: 
  references:

- num: 9
  lecturer: AK
  theme: Computability
  description: To understand the fundamental limitations of computation, we consider the case of decision problems, and we argue that it suffices to consider decision problems on natural numbers.  A problem is said to be decidable whenever we can describe an algorithm to solve it.
  videos: 
  references:
    - decision-problems
    - decidable-(recursive)
    - semidecidable-(recursively-enumerable)
    - decidability-of-automaton-emptiness
    - decidability-of-while-program-membership
    - decidability-of-existence-of-god
    - coding-strings
    - semidecidability-of-while-program-termination

- num: 10
  lecturer: AK
  theme: Universality of While
  description: We argue that the While language is capable of describing any algorithm by illustrating, informally, that (a) language extensions do not add expressive power and (b) While already subsumes other models of computation.
  videos: 
  references:
    - church-turing-thesis

- num: 11
  lecturer: AK
  theme: Undecidability
  description: We prove that the problem *While Program Termination* is undecidable.  We introduce the technique of *reduction* and deduce that a number of other problems are therefore also undecidable.
  videos: 
  references:
    - undecidability-of-while-program-termination
    - undecidability-of-while-program-membership
    - undecidability-of-equality-of-haskell-functions

- num: 12