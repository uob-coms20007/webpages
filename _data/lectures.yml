- title: Introduction
  description: Themes of the unit, how the unit runs.  We also talked about strings, but we will recap that in the next lecture.  Unfortunately, the *Replay* system did not work, so there is no recording of this lecture.
  replay:
  notes:
  refs:
    - "The weird C programs are past winners of the [The International Obfuscated C Code Contest](https://www.ioccc.org/): [burton](https://www.ioccc.org/2020/burton/prog.c), [kurdyukov3](https://www.ioccc.org/2020/kurdyukov3/prog.c) and [endoh3](https://www.ioccc.org/2020/endoh3/prog.c)."

- title: Regex Syntax
  description: Some notation and nomenclature to do with strings/words, and then we introduced the syntax of regular expressions.  The replay recording only shows the projector screen, but I frequently write on the boards, so I suggest you use the notes to follow along. 
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/cbd3617e47b941db9ad4a9ee33e2a7461d
  notes:
    - https://uob-coms20007.github.io/reference/regular/strings.html
    - https://uob-coms20007.github.io/reference/regular/syntax.html
  refs:
    - "Question: can you parse arbitrary (X)HTML with regular expressions? Answer: [stackoverflow](https://stackoverflow.com/a/1732454)."

- title: Regex Semantics
  description: Some syntactic sugar to making writing regex sweeter.  Operational semantics for regular expressions, configurations and transitions, traces.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/690de03cf0f64cf584a7035b477119d11d
  notes:
    - https://uob-coms20007.github.io/reference/regular/syntax.html
    - https://uob-coms20007.github.io/reference/regular/semantics.html
  refs:

- title: Finite Automata
  description: "Introduction to finite automata. Four examples: odd/even automaton, aa-substring automaton, odd/even or aa automaton, odd/even and aa automaton."
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/05744757a4924052a2280ce959e860901d
  notes:
    - https://uob-coms20007.github.io/reference/regular/automata.html
  refs:

- title: Kleene's Theorem
  description: The statement of Kleene's Theorem and how to understand its meaning.  The formal construction of an automaton from a given regular expression and an illustration of the opposite direction.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/ce1e4dc75dd1417bb3cc0fcff98a66851d
  notes:
    - https://uob-coms20007.github.io/reference/regular/Kleene.html
  refs:

- title: Inexpressibility
  description: The inexpressibility of a language of matched "parentheses" done somewhat informally.  The observation that, if a finite automaton accepts a very long string, it must go through a loop.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/6bafedb39b7f4d24a066306f7fc5c9781d
  notes:
    - https://uob-coms20007.github.io/reference/regular/inexpressibility.html
  refs:

- title: Regularity
  description: The languages expressible by regular expressions (= the language expressible by finite automata) are called regular.  We converted our informal observation about long strings accepted by short automata into a mathematical property of regular languages, called the pumping lemma.  
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/1257f4c7106140e8a36c4866596d60581d
  notes:
   - https://uob-coms20007.github.io/reference/regular/regularity.html
  refs:

- title: Determinisation
  description: We look at a particular kind of finite automata, which are called deterministic, and observe they have several nice properties.  We observe that non-determinism is nevertheless useful as a programming/design abstraction and that non-determinism can be "compiled away" by exploring all non-deterministic choices in parallel.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/481ab961915c4e92951f3fcc21cd34f11d
  notes:
    - https://uob-coms20007.github.io/reference/regular/determinsim.html
  refs:
    - "Non-determinism can be expressed in Haskell using the List monad, see e.g. https://www.schoolofhaskell.com/school/starting-with-haskell/basics-of-haskell/13-the-list-monad"

- title: The While Language and its Expressions
  description: We graduate from regular expressions to a simple imperative language. We discuss arithmetic expressions and their semantics.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/8f11dca1e84349e5b6b07e1ac9b917631d
  notes:
    - https://uob-coms20007.github.io/reference/while/expressions.html
  refs:

- title: The While Language and its Expressions (take 2)
  description: We iterate on arithmetic expresions and their semantics, and discuss boolean expressions and some of the design choices we made along the way.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/25c5eebdc37f47cdaa8650d96441e64b1d
  notes:
    - https://uob-coms20007.github.io/reference/while/expressions.html
  refs:

- title: The While Language - Syntax and Semantics
  description: We graduate from expressions to the full imperative language, and discuss its small-step operational semantics.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/ba81fd86976d4347b32ce58dd6f3307d1d
  notes:
    - https://uob-coms20007.github.io/reference/while/statements.html
  refs:

- title: The While Language - Big Steps
  description: We consider a new semantic relation for the While language, which ignores intermediate computation steps.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/e50364d24b5240f58cafc7b1fdb0c89c1d
  note:
    - https://uob-coms20007.github.io/reference/while/statements.html
    - https://uob-coms20007.github.io/reference/while/big-step.html
  ref:

- title: The Blocks Language - Syntax and Semantics
  description: We add block structures to our language, which gives us ways of managing variable scope, and later enables us to deal with procedures.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/b4ea45c808f74400b4006ab6839f3e941d
  notes:
    - https://uob-coms20007.github.io/reference/while/blocks.html
  refs:

- title: The Procs Language - Syntax and Semantics
  description: We add procedures and calls to our language, which gives us a lot more problems than it's worth, but makes for fun discussions.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/c5b083e21ddc43fe99b6d1f37c85b8b51d
  notes:
    - https://uob-coms20007.github.io/reference/while/procs.html
  refs:
    
- title: Computable functions
  description: We begin exploring the limits of computation.
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/3a14430ef2b04d8784324f264de8be821d
  notes:
    - https://uob-coms20007.github.io/reference/prereqs/functions.html 
    - https://uob-coms20007.github.io/reference/computability/functions.html

- title: Decidable predicates
  description:
  replay: https://mediasite.bris.ac.uk/Mediasite/Play/7c7dfb8def98418d8aa02815f2b8dd4a1d
  notes:
    - https://uob-coms20007.github.io/reference/prereqs/sets.html
    - https://uob-coms20007.github.io/reference/computability/predicates.html

- title: Bijections etc.
  description: We recap some material on injections, surjections and surjections. This will be required for encoding data as natural numbers.
  notes:
    - https://uob-coms20007.github.io/reference/computability/bijections.html
    - https://uob-coms20007.github.io/reference/computability/reflection.html    